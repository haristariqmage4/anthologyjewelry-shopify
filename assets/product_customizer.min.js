window.anthology.customizer = {handlers:{}}

// ProductCustomizer CLASS
function ProductCustomizer ( settings, _product ) {
        
    PRIVATE_VARS: {
        var selectors = {
            customizer: 'div.customizer',
            customizerActive: '.active',
            customizerAccordion: '[for="option-customize"]',
            form: 'form[action="/cart/add"]',
            singleCustomization: '.custom-feature-ui-single',
            customOptions: '.custom-options',
            tabs: '.custom-options a',
            singleTab: 'a[data-value]',
            activeTabs: 'div.customizer a[data-value].active',
            properties: 'input#customization[name^="properties"]',
            formButtonsWrapper: '.custom-feature-ui-single__form-buttons',
            formButtons: '.button',
            formButtonSave: '.button.save',
            formButtonCancel: '.button.cancel',
            selectorWrapper: 'div.selector-wrapper'
        }
        var lastSelectedCustomization = null
    }
    
    PUBLIC_VARS: {

        this.class = "ProductCustomizer"
        this.product = {}
        this.customizationsUI = []
        this.customizations = {}
        this.tabs = []  // NodeList
        this.selectedCustomization = null
        this.inputPropertiesField = null    // HTML Element
        this.eventAnyTabSelected = new Event('ProductCustomizer:onTabSelect');
        this.interactedWith = false

        // Settings and merging with custom settings
        this.settings = Object.assign({}, settings )
        this.settings.selectors = Object.assign( selectors, settings.theme.selectors )
    }
    
    CLASSES: {

        // Creates a new Product object with only what we need..
        function Product ( product ) {

            this.class = "Product"
            this.id = product.id //int
            this.available = product.available //bool
            // compare_at_price: (int)
            // compare_at_price_max: (int)
            // compare_at_price_min: (int)
            // compare_at_price_varies: (Bool)
            // content: (html)
            // created_at: (string:timestamp)
            // description: (same as content)
            // featured_image: (string:url)
            // handle: (string)
            // images: (array)
            // media: (array)
            this.options = product.options // array
            // price: (int)
            // price_max: (int)
            // price_min: (int)
            // price_varies: (Bool)
            // published_at: (string:timestamp)
            // requires_selling_plan: (Bool)
            // selling_plan_groups: (array)
            this.tags = product.tags // (array)
            // title: "Custom Signature Necklace"
            this.type = product.type // (string)
            this.variants = product.variants // array
            // vendor: "Anthology Jewelry Company"
        
        }

        // Creates a new newCustomFeature
        function Customization ( name, type, tab, feature, callback, selectors ) {

            PRIVATE_VARS: {
                var eventDetails = {
                    customization: this
                }
            }

            PUBLIC_VARS: {
                this.class = "Customization"
                this.name = name
                this.type = type
                this.el = feature
                this.tab = tab
                this.formButtonCancel = null
                this.ready = null
                this.registeredEvents = []  // Using the "on" function 
                this.selected = false

                // TODO: Do we need these available publically?
                // TODO: Combine them into a single object of Events
                this.eventCustomizationSelected = new Event('Customization:onTabSelect');
                this.eventCurrentCustomizationSelected = new Event('Customization:onThisTabSelect');
                this.eventCancelCustomization = new Event('Customization:onCancel');
                
                this.eventCustomizationSelected.details = eventDetails
                this.eventCurrentCustomizationSelected.details = eventDetails
                this.eventCancelCustomization.details = eventDetails
            }
            
            PUBLIC_METHODS: {
                /* Internal Event Handlers for Customizations */
                /* Internal Event Handlers for Customizations */
                this.on = function ( eventName, func ) {
                    
                    this.registeredEvents.push(
                        {
                            eventName: eventName,
                            func: func
                        }
                    )
                    
                }
                this.fireEvent = function ( eventName, eventObj ) {
                    // Get array of functions needing to be invoked
                    var registeredEventFunctions = this.registeredEvents.filter(function( event ){
                        if ( event.eventName === eventName )
                            return event.func
                    })
                    // Invoke all functions registered for this event name
                    for ( var event in registeredEventFunctions ){
                        registeredEventFunctions[event].func.bind(this)( eventObj )
                    }
                }

                /* Customization's Buttons (Save, Cancel) */
                /* Customization's Buttons (Save, Cancel) */
                this.getFormButtonsSection = function () {
                    return this.el.querySelector( selectors.formButtonsWrapper )
                }

                this.resetCustomization = function () {

                    console.log('resetCustomization: ' + this.name)

                    // Hide Content
                    this.el.classList.remove('show')

                    // Disactivate Accordion Tab
                    this.tab.classList.remove('active')

                    this.selected = false

                }
            }         

            PRIVATE_METHODS: {

                /* Show/Hide the option */
                function toggleOption () {
                    this.el.classList.toggle('show')
                    this.tab.classList.toggle('active')
                }

                // Apply basic resets to Customizations
                function cancelCustomization ( evt ) {

                    console.log("cancelCustomization")

                    let { customization, selectors } = this

                    //resetCustomization ( customization )
                    customization.resetCustomization()

                    // Remove "selected" accordion
                    //window.anthology.accordion.removeSelectedPanelItem('customize')
                    document.querySelector( `${selectors.customizerAccordion} ${selectors.singleTab}` ).remove()
                    
                    customization.eventCancelCustomization.details = {
                        customization: customization
                    }

                    // let the customization know
                    customization.tab.dispatchEvent( customization.eventCancelCustomization )

                    // Let the world know
                    document.dispatchEvent( customization.eventCancelCustomization )

                }

                // Move the matching customization content under a tab
                function tieContentToTab ( customizationElmnt, customizationTab )
                {
                    $( customizationElmnt ).insertAfter( $( customizationTab ) )
                }

            }          

            // Form Buttons (cancel, save?)
            // Form Buttons (cancel, save?)
            // Form Buttons (cancel, save?)
            var formButtons = this.getFormButtonsSection()
            if ( formButtons )
            {
                // Cancel button 
                this.formButtonCancel = formButtons.querySelector( selectors.formButtonCancel )

                // Listen to 'Cancel' click
                registerEvent( "click", this.formButtonCancel, cancelCustomization, { customization:this, selectors:selectors })
            }

            // Move the content under tab
            tieContentToTab ( this.el, this.tab ) 
            
            // Listen to the TAB click and let the world know
            registerEvent("click", this.tab, function() {

                // Prevent double-click of same tab
                if ( this.selected )
                    return 

                this.selected = true
                
                // CALLER Tab dispatch
                this.tab.dispatchEvent( this.eventCurrentCustomizationSelected )

                // GLOBAL disaptch
                document.dispatchEvent( this.eventCustomizationSelected )

            }, this)

            // Execute Customization's callback
            if ( typeof this.callback == 'Function')
                callback( this )
        }
    }

    PRIVATE_METHODS: {

        // Grabs the HTML of all tabs options. Returns jQuery Object
        function getAllTabsUI() {
            return Array.from( document.querySelectorAll( this.settings.selectors.tabs ) )
        }

        // Grabs the HTML of all custom options. Returns jQuery Object
        function getAllCustomizations () {
            return Array.from( document.querySelectorAll( this.settings.selectors.singleCustomization ) )
        }

        function createCustomizations ( productCustomizer ) {
            
            var pc = productCustomizer

            function singleCustomUI( htmlElmnt, index )
            {

                var tab = pc.tabs[index];
                var settings = {
                    name: htmlElmnt.dataset.name,
                    type: htmlElmnt.dataset.type,
                    tab: tab,
                    content: htmlElmnt
                }
                var cstmz = new Customization( 
                    settings.name,
                    settings.type,
                    settings.tab,
                    settings.content,
                    null,
                    pc.settings.selectors
                )

                pc.customizations[settings.name] = cstmz

            }

            pc.customizationsUI.forEach ( singleCustomUI );
        }

        // Grab an instance of the input[name=properties]
        function getPropertiesField () {
            return document.querySelector( this.settings.selectors.properties )
        }

        // Theme based Get Product
        function getProduct ( ) {
            var p = null
            if ( this.settings.theme.getProduct )
                p = this.settings.theme.getProduct()

            return p
        }

        function setCurrentCustomization ( productCustomizer, selectedCustomization ){
            
            if ( selectedCustomization )
            {
                var propVal = `properties[${selectedCustomization.name}]`;
                
                // Last selected
                if ( productCustomizer.interactedWith ) {
                    lastSelectedCustomization = productCustomizer.selectedCustomization
                    lastSelectedCustomization.selected = false
                }
                    
                productCustomizer.inputPropertiesField.setAttribute( 'name', propVal)
                productCustomizer.selectedCustomization = selectedCustomization
                productCustomizer.eventAnyTabSelected.details = {
                    productCustomizer: productCustomizer
                }

                if ( ! productCustomizer.interactedWith )
                    productCustomizer.interactedWith = true

                document.dispatchEvent( productCustomizer.eventAnyTabSelected )
            }
            else {

                // Reset
                var propVal = 'properties[none]';

                productCustomizer.inputPropertiesField.setAttribute('name', propVal)
                productCustomizer.inputPropertiesField.setAttribute('value','')
                productCustomizer.selectedCustomization = null;

            }
            
            console.log("setCurrent: "+propVal);

        }

        function initCustomizationTracker ( productCustomizer ) {

            registerEvent('Customization:onTabSelect', document, function ( evt ) {

                var productCustomizer = this
                var selectedCustomization = evt.details.customization

                setCurrentCustomization( productCustomizer, selectedCustomization )

            }, productCustomizer)

            registerEvent('Customization:onCancel', document, function ( evt ) {
                
                setCurrentCustomization ( productCustomizer, null )

            }, productCustomizer)
        }

        function unselectAllTabs ( activeTabsSelector ) {
                        
            var elActiveTabs = document.querySelectorAll( activeTabsSelector )

            // The tab next to the "Customize" Tab
            elActiveTabs[0].remove()

            // The first selected tab under "Customize"
            elActiveTabs[1].classList.remove('active')
        }

    }
    
    PUBLIC_METHODS: {

        // Called when init is done..
        this.showCustomizer = function () {

            console.log("ProductCustomizer Instantiated OK...")

            $( this.settings.selectors.customizer ).addClass('active')
            
        }

        // Registers a new customization by name
        // Provides an instance of the customization back
        this.addCustomizationHandler = function ( name, func ) {
            var pc = this
            function updatePropertyFieldForThisCustomization ( value ) {
                pc.updatePropertyInput( name, value )
            }

            func( this.customizations[name], updatePropertyFieldForThisCustomization );
        }

        // Updates the single property field so only 1 property can be submitted at a time
        this.updatePropertyInput = function ( name, value ) {

            var propertyFieldName = `properties[${name}]`;

            // Change the properties name if not changed yet and reset value
            if ( this.inputPropertiesField.name !== propertyFieldName )
            {
                this.inputPropertiesField.setAttribute('name', propertyFieldName )
                this.inputPropertiesField.setAttribute('value','')
            }
                
            this.inputPropertiesField.setAttribute('value',value)

        }

        this.getLastSelectedCustomization = function () {
            return lastSelectedCustomization
        }

    }

    this.init = function () {

        var _this = this

        // Create a Product instance
        this.product = new Product( getProduct.bind(this)() )
        
        // Get tabs. Returns a NodeList
        this.tabs = getAllTabsUI.bind(this)()
        
        // Get Customizations from HTML
        this.customizationsUI = getAllCustomizations.bind(this)()

        // Get the Global [name=Properties[none]] Field
        this.inputPropertiesField = getPropertiesField.bind(this)()

        // Create Customizations objects
        createCustomizations ( this )

        // Uncheck all customizations (culprit: clickbox)
        // Remove customize tab's selected option (culprit: window.anthology.accordion)
        unselectAllTabs( this.settings.selectors.activeTabs )
            
        // Keep track of the current selected Customization
        initCustomizationTracker( this )
        
        // This is where all of the Customizations can be added..
        this.onReady( this );

        // Just displays on the screen the "Customizer"
        // tab under the last Option
        this.showCustomizer();

    }

}

// TODO: Re-work the below. It should be part of the ProductCustomizer (themeGetProduct,canopyTheme_GetProduct,productCustomizerSettings.theme.getProduct)
// TODO: Re-work the below. It should be part of the ProductCustomizer (themeGetProduct,canopyTheme_GetProduct,productCustomizerSettings.theme.getProduct)
// TODO: Re-work the below. It should be part of the ProductCustomizer (themeGetProduct,canopyTheme_GetProduct,productCustomizerSettings.theme.getProduct)

// Settings Variables
var productCustomizerSettings = {
    theme: {
        selectors: {
            form: 'form.product-form',
            selectorWrapper: 'div.selector-wrapper',
        },
        getProduct: function canopyTheme_GetProduct () {

            var $form = $( productCustomizerSettings.theme.selectors.form )
        
            var productId = $form.data('product-id');
            var data = null;
        
            data = JSON.parse(document.getElementById('ProductJson-' + productId).innerHTML);
            
            return data;
        
        }
    }
}

// Customization Functions
// Customization Functions
// Customization Functions
Object.assign( window.anthology.customizer.handlers, {

    handwriting: function ( customization, updatePropertyField ) {
        
        var hr = {}
        
        Object.assign( hr, customization )
        
        // Mimetypes
        // Not necessary - its handled by uplift's config setting (Apps>Upload-Lift Image Upload/Fields>Handwriting Image>File settings>Allowed file types)
        
        hr.selectors = {
            uploadLift: {
                instance: '#uploadlift-handwriting',
                id: 'uploadlift-handwriting'
            }
        }

        // Listen to the GLOBAL tab selected
        // Use this to deal with all customization click 
        registerEvent('ProductCustomizer:onTabSelect', document, function ( evt ){
            
            console.log('ProductCustomizer:onTabSelect in handwriting')

            var productCustomizer = evt.details.productCustomizer;
            var lastSelectedCustomization = productCustomizer.getLastSelectedCustomization()

            if ( lastSelectedCustomization && "handwriting" === lastSelectedCustomization.name )
            {

                var uploadField = getUpliftFieldById(hr.selectors.uploadLift.id);
                
                if ( uploadField )
                {
                    var int = setInterval( function ()
                    {
                        var ufProperties = uploadField.element.querySelector('input[name="properties[Handwriting]"')
                        
                        if ( ufProperties )
                        {
                            var uploadFileUrl = ufProperties.getAttribute("value")

                            // Clear the properties
                            ufProperties.setAttribute("id","upliftHandwritingProperties")
                            ufProperties.setAttribute("name","properties[none]")
                            ufProperties.setAttribute("value","")

                            // Save the previous value
                            ufProperties.dataset.url = uploadFileUrl

                            clearInterval(int)
                        }
                        
                    }, 500);
                }
                
                
            }
                        
        })

        // Listen to this customization's tab selected
        // Use this to deal with this customization
        // Update Propertie if the user comes back to page and browser shows cached field
        registerEvent('Customization:onThisTabSelect', hr.tab, function( evt ) {

            console.log('Customization:onThisTabSelect in handwriting')

            // Update Global properties field to nothing
            this.updatePropertyField("")

            var uploadField = getUpliftFieldById(hr.selectors.uploadLift.id);
            var ufProperties = uploadField.element.querySelector('#upliftHandwritingProperties')

            if ( ufProperties )
            {
                if ( ufProperties.getAttribute("name") === "properties[none]" )
                {
                    ufProperties.setAttribute("name","properties[Handwriting]")
                    ufProperties.setAttribute("value",ufProperties.dataset.url)
                }
            }

        }, { updatePropertyField: updatePropertyField })

        Object.assign( customization, hr )
    },

    houseFont: function ( customization, updatePropertyField ) {
        
        var houseFontField = customization.el.querySelector('#house-font-input');
        
        registerEvent('input', houseFontField, function( evt ) {
            this.updatePropertyField( evt.target.value )
        }, { updatePropertyField: updatePropertyField })

        // Update Propertie if the user comes back to page and browser shows cached field
        registerEvent('Customization:onThisTabSelect', customization.tab, function( evt ){
            
            var customization = evt.details.customization
            var { updatePropertyField, houseFontField } = this

            updatePropertyField( houseFontField.value )

        }, { updatePropertyField: updatePropertyField, houseFontField: houseFontField })

    },

    soundwave: function ( data ) {

        var sw = {}
        var customization = data.customization
        var updatePropertyField = data.updatePropertyField

        // Inherit all of customizations' methods and attributes
        Object.assign( sw, customization )

        // Acceptable filetypes
        sw.mimeTypes = {
            image: ["image/jpeg","image/jpg","image/gif","image/png"],
            sound: ["audio/mp3","audio/mpeg","audio/wav"]
        }

        // CSS Selectors
        sw.selectors = {
            buttonSelectFile: 'button#soundwave-select-button',
            fileInputElmnt: '[name="soundwave-audio-file"]',
            uploadLift: {
                wrapper: '#uploadlift-wrapper',
                instance: '#uploadlift-soundwave',
                id: 'uploadlift-soundwave',
                deleteButton: '.filepond--action-revert-item-processing'                
            }
        }

        // TODO: Merge the wavesurfer onReady into 
        // this wavesurfer object
        
        // Wavesurfer
        sw.wavesurfer = {
            instance: null,
            settings: {
                container: '#waveform',
                barWidth: 1,
                hideScrollbar: true,
                interact: false,    // was disableDragSelection, offering cropping thru uploadlift
                height: 90,
                cursorWidth: 0,
                minPxPerSec: 2,
                responsive: true,
                waveColor: '#858585',
                barGap: 2,
                normalize: true,
                mediaType: 'audio'
            },
            create: function () {

                this.destroy()

                this.instance = WaveSurfer.create( this.settings )
                return this.instance

            },
            destroy: function () {
                
                // Removes everything inside the "container" identified in settings
                if ( this.instance )
                    this.instance.destroy()

            },
            load: function ( file ) {
                
                // file => usually from an index from FileList from an input[type='file'].
                // So usually the first in the list ei file = FileList[0]

                // Create a BLOB address from 1st 
                var objURL = sw.utils.URL.createObjectURL( file )
                return this.instance.load(objURL)

            }
        }

        // Selected DOM Elements
        sw.domObj = {
            selectFile: sw.el.querySelector( sw.selectors.buttonSelectFile ),
            fileInput: sw.el.querySelector( sw.selectors.fileInputElmnt )
        }

        sw.utils = {
            URL: window.URL || window.webkitURL
        }

        sw.fileUploaded = false

        // Customization Event: Big Button Clicked
        sw.on('soundwave:selectFileButtonClicked', function ( evt ) {
            console.log('soundwave:selectFileButtonClicked')
            sw.domObj.fileInput.click()
        })
        
        // Customization Event: After File Selected from Modal window
        function processSelectedAudioFile ( file ) {
            console.log('processSelectedAudioFile')

            if ( file )
            {

                // WaveSurfer
                // WaveSurfer
                // WaveSurfer
                var ws = sw.wavesurfer.create()
                console.log("WaveSurfer Instance", ws)
                
                var emptyCanvas = ws.exportImage();

                ws.on('ready', function (){
                    console.log('ready')

                    // Show "original" label
                    var elP = ws.container.firstElementChild
                    elP.classList.remove('hide')

                    var interval = setInterval(() => {

                        var render = ws.exportImage();
                        
                        if ( render != emptyCanvas ) {
                            clearInterval( interval )
                            sw.fireEvent('soundwave:wavesurferReady', { render:render, sw:sw })
                        }
                            
                    },1000) 
                })

                var observer = sw.wavesurfer.load( file )
                console.log("WaveSurfer Load Observer", observer )
                
            }
            
        }

        // Customization Event: Wavesurfer Ready (fired by wavesurfer.on("ready"))
        sw.on('soundwave:wavesurferReady', function ( data ) {
            console.log('soundwave:wavesurferReady')
            var render = data.render
            var sw = data.sw

            // UPLIFT
            // UPLIFT
            // UPLIFT
            
            // TODO: See if 'this' can be used instead of sw

            // Get the upload field (uplift app) button
            var uploadField = getUpliftFieldById(sw.selectors.uploadLift.id);
            
            if ( uploadField ) {

                // Show uploadlift
                uploadField.element.classList.remove('hide')            

                console.log( "render", render )
                // Upload the waveform
                uploadField.uploadFile( render ).then(function(file) {
                    sw.fileUploaded = true
                });

            }

        })
        
        // Big Button 'click'
        registerEvent("click", 
            sw.domObj.selectFile,
            function ( evt ) {
                sw.fireEvent('soundwave:selectFileButtonClicked', evt)
            }
        )
        
        // File Input 'change'
        registerEvent("change",
            sw.domObj.fileInput,
            function ( evt ) {
                var files = evt.target.files
                processSelectedAudioFile( files[0] )
            }
        )

        // Listen to the GLOBAL tab selected
        // Use this to deal with all customization click 
        registerEvent('ProductCustomizer:onTabSelect', document, function ( evt ){
         
            console.log('ProductCustomizer:onTabSelect in soundwave')
            
            var productCustomizer = evt.details.productCustomizer;
            var lastSelectedCustomization = productCustomizer.getLastSelectedCustomization()

            if ( lastSelectedCustomization && "soundwave" === lastSelectedCustomization.name )
            {

                var uploadField = getUpliftFieldById(sw.selectors.uploadLift.id);
                if ( uploadField )
                {
                    var int = setInterval( function ()
                    {
                        var ufProperties = uploadField.element.querySelector('input[name="properties[Soundwave]"')
                        if ( ufProperties )
                        {
                            var uploadFileUrl = ufProperties.getAttribute("value")

                            // Clear the properties
                            ufProperties.setAttribute("id","upliftSoundwaveProperties")
                            ufProperties.setAttribute("name","properties[none]")
                            ufProperties.setAttribute("value","")

                            // Save the previous value
                            ufProperties.dataset.url = uploadFileUrl

                            clearInterval(int)
                        }
                        
                    }, 500);
                }
                
                
            }
                        
        })
        
        // Listen to this customization's tab selected
        // Use this to deal with this customization
        // Update Propertie if the user comes back to page and browser shows cached field
        registerEvent('Customization:onThisTabSelect', sw.tab, function ( evt ){
            
            console.log('Customization:onThisTabSelect in soundwave')

            var customization = evt.details.customization

            // Update Global properties field to nothing
            this.updatePropertyField("")
            var uploadField = getUpliftFieldById(sw.selectors.uploadLift.id);
            var ufProperties = uploadField.element.querySelector('#upliftSoundwaveProperties')
            if ( ufProperties )
            {
                if ( ufProperties.getAttribute("name") === "properties[none]" )
                {
                    ufProperties.setAttribute("name","properties[Soundwave]")
                    ufProperties.setAttribute("value",ufProperties.dataset.url)
                }
            }

            // If user returns and a file already exists..
            if ( ! sw.fileUploaded && sw.domObj.fileInput.files && sw.domObj.fileInput.files.length ){
                processSelectedAudioFile( sw.domObj.fileInput.files[0] )
            }
            

        }, { updatePropertyField: updatePropertyField })
        
        Object.assign( data.customization, sw )

    },
    
    romanNumeralsDate: function ( data ) {

        function convertTextToDate ( text, separator ) {

            var dateMDY = text.split( separator );   // ex '1978-11-02'
            var dateUTC = Date.UTC( dateMDY[0], dateMDY[1]-1, dateMDY[2], 12);
            
            return new Date( dateUTC )
        }
        
        function convertDateToRomanNumerals( date ) {
    
            var month = romanNumeral( date.getMonth() )
            var day = romanNumeral( date.getDay() )
            var year = romanNumeral( date.getFullYear() )

            return `${month} ${day} ${year}`

        }

        function updatePreview ( text, resultField ) {
            
            var romanDate = ""

            if ( text.length ){
                var date = convertTextToDate( text, '-' )
                romanDate = convertDateToRomanNumerals( date )
            }

            resultField.value = romanDate

            return romanDate
        }
                
        var customization = data.customization
        var updatePropertyField = data.updatePropertyField
        var changeEvent = isEventSupported('input')?'input':'change';
        var romanResult = document.querySelector('#roman_numerals_date_result')
        var inputDate = document.querySelector('[data-name="roman numeral date"] input[name=date]')
        
        registerEvent( changeEvent, inputDate, function( evt ) {

            // Will return YYYY-MM-DD or empty string
            var text = evt.target.value
            var { updatePropertyField, romanResult } = this

            var result = updatePreview( text, romanResult )
            
            updatePropertyField( result )
            
        }, { updatePropertyField: updatePropertyField, romanResult: romanResult })

        // Update Propertie if for cases like:
        // - user returns to tab after selecting another tab
        // - user returns from another page and the field is cached
        
        registerEvent('Customization:onThisTabSelect', customization.tab, function( evt ){
            
            console.log('romanNumeralsDate was selected');
            var customization = evt.details.customization
            var { updatePropertyField, romanResult, inputDate } = this
            var text = inputDate.value
            var result = updatePreview( text, romanResult )

            updatePropertyField( result )
            
        }, { updatePropertyField: updatePropertyField, romanResult: romanResult, inputDate: inputDate })
    
    },
    
    specialDate: function ( customization, updatePropertyField ) {
    
        var inputDate = customization.el.querySelector('[name="special-date"')
        var changeEvent = isEventSupported('input') ? 'input':'keypress';

        registerEvent( changeEvent, inputDate, function( evt ) {
            this.updatePropertyField( inputDate.value )
        }, { updatePropertyField: updatePropertyField } );
        
        registerEvent('Customization:onThisTabSelect', customization.tab, function( evt ){            
            this.updatePropertyField( this.inputDate.value )            
        }, { updatePropertyField: updatePropertyField, inputDate: inputDate })

    }

})

var pc = new ProductCustomizer( productCustomizerSettings );

pc.onReady = function ( _pc ) {
    
    // TODO: Hide Customizations which dependencies are unavailable
    //       - window.Cloudlift.upload.App
    //       - wavesurfer
    //       - roman numerals

    // Weird - using destroy on just 1 throws an error on App.setup()
    // but not when using the following and removing all of them
    // window.Cloudlift.upload.App.destroy()
    // window.Cloudlift.upload.App.setup();

    var custom_tags = pc.product.tags;

    // Have library dependencies

    // TODO: Turn the multiple if statements into a switch
    if ( custom_tags.includes('Handwriting') ) {
        _pc.addCustomizationHandler('handwriting', window.anthology.customizer.handlers.handwriting )
    }
    if ( custom_tags.includes('Soundwave') )
    {
        _pc.addCustomizationHandler('soundwave', function ( customization, updatePropertyField ) {
            loadJs(
                'https://unpkg.com/wavesurfer.js', 
                window.anthology.customizer.handlers.soundwave,
                { 
                    customization: customization,
                    updatePropertyField: updatePropertyField
                }
            );
        })
    }
    if ( custom_tags.includes('Roman Numeral Date') ) {
        _pc.addCustomizationHandler('roman numeral date', function ( customization, updatePropertyField ) {

            loadJs(
                "//cdn.shopify.com/s/files/1/0326/3797/6711/t/46/assets/romandays.js?v=157037933858871241581691199223", 
                window.anthology.customizer.handlers.romanNumeralsDate,
                { 
                    customization: customization,
                    updatePropertyField: updatePropertyField
                } 
            );
             
        })
    }
    
    // Have no library dependencies
    if ( custom_tags.includes('House Font') ) {
        _pc.addCustomizationHandler('house font', window.anthology.customizer.handlers.houseFont )
    }
    if ( custom_tags.includes('Special Date') ) {
        _pc.addCustomizationHandler('special date', window.anthology.customizer.handlers.specialDate )
    }
        
};

registerEvent( "DOMContentLoaded", document, pc.init, pc )

// Temp - clear console
;(function (){

    search = new window.URLSearchParams(location.search)
    
    if ( search.has('clear') )
    {
        seconds = search.get('clear')
        if ( seconds.length )
            t=setTimeout( () => { console.clear(); console.log("PC") }, seconds * 1000)    
    }
        
})()



// OptionUI(... saveButtonFunc, cancelButtonFunc)