// Put your applicaiton javascript here

// Namespacing
window.anthology = {

  // Accordion
  // Accordion
  // Accordion
  accordion: {

    tabSelector: 'label.accordion',
    contentSelector: 'div.panel',
    optionsWrapperSelector: '.selector-wrapper',
    padding: 20,

    init: function () {

      function initializeAccordions () {
        this.forEach( initializeTab )
      }

      function initializeTab (tab) {
        
        var panel = tab.nextElementSibling;
        var tabClasses = tab.classList

        // Create a dispatchable event for this
        const event = new Event('Accordion:onTabClicked');
        event.details = {
          tab: tab,
          panel: tab
        }

        // Has a default active tab? Then open tab by default..
        if ( tabClasses.contains("active") ) {
          //panel.style.maxHeight = panel.scrollHeight + padding * 2 + "px";
          openPanel ( panel )
        }

        registerEvent("click", tab, togglePanel )
        registerEvent("click", tab, function (){
          document.dispatchEvent(event)
        })

      }
      
      function togglePanel () {

        var tab = this
        var panel = tab.nextElementSibling;
      
        // Add/Remove Active Tab Class
        tab.classList.toggle("active");
        
        // Show/Hide sibling panel
        if ( panel.style.maxHeight ) {
          closePanel ( panel )
        } else {
          //panel.style.maxHeight = panel.scrollHeight + padding * 2 + "px";
          openPanel ( panel )
        }
        
      }
      
      function openPanel ( panel ) {
        panel.style.maxHeight = "1000px";
      }
      
      function closePanel ( panel ) {
        panel.style.maxHeight = null;
      }

      function showSelectedPanelItem () {

        var $items = $(this.tabSelector).siblings(this.contentSelector).find('a')
        
        $items
          .each((i,itm)=>{

            var $itm = $(itm)
            var isActive = $itm.is('.active')

            if ( isActive ) {
              // Clone option and append to the closest tab
              var label = $itm.closest( this.optionsWrapperSelector ).find( this.tabSelector )
              $itm.clone().appendTo( label );
            }

          })
          .on('click', refreshSelectedPanelItem)
        
      }

      // TODO: Refactor this function to make it more efficient
      //       or to make it part of showSeletedPanelItem
      function refreshSelectedPanelItem ( evt ) {

        var $selectedOption = $(evt.target);
        var $selectedOptionClone = $selectedOption.clone().addClass('active')

        //$selectedOptionClone.appendTo( $selectedOption.closest('.selector-wrapper').find('label') );
        var $tab = $selectedOption.closest('.panel').parent().find('label.accordion')
        
        if ( $tab.has('a').length )
        {
          $tab.find('a').replaceWith( $selectedOptionClone )
        }
        else {
          $selectedOptionClone.appendTo( $tab );
        }

      }

      var htmlColl_accordions = document.querySelectorAll( this.tabSelector );

      registerEvent( "DOMContentLoaded", document, initializeAccordions, htmlColl_accordions )
      registerEvent( "DOMContentLoaded", document, showSelectedPanelItem, this )
    },

    // Params   tab (values=color|customizer) from the for="option-color"
    removeSelectedPanelItem: function ( tab ) {
      $(this.tabSelector).filter("[for=`option-${tab}`]").find('a').remove()
    }

  },

  options: {

    metals: {
      init: function() {
  
        var baseMetalsSelector = "[data-name='Base Metal'] ul a"
  
        function addPricesToBaseMetals () {
  
          var variants = meta.product.variants;
          
          $(baseMetalsSelector).each( function () {
            var $this = $(this),
            label = $this,
            baseMetalName = $this.data("value"),
            price = 0;
            
            // Get the first price of the variant that matches this base metal
            for ( index in variants ) 
            {
              var varTitle = variants[ index ].public_title;
              var varPrice = variants[index].price
  
              if ( variants[ index ].public_title.indexOf(baseMetalName) != -1 ) 
              {
                price = formatMoney ( varPrice )
                break;
              }
            }
            
            // Replace the html
            $this.html( label.text() + "<br>" + price + "" );
  
            // Create an event handler
            $this.on("click", 
              function () {
                var selectedBaseMetal = $(this).data("value");
                console.log("Base Metal was changed to", selectedBaseMetal);
                $(document).triggerHandler("BaseMetalChanged", {
                    activeBaseMetal: selectedBaseMetal,
                })
              }
            )
  
          })

        }
        
        registerEvent("DOMContentLoaded", document, addPricesToBaseMetals)

      }
    },

    colors: {

      init: function () {

        // Replaces all color options to a Gold option
        // if user clicks on 14k Gold 
        var colorsSelector = "[data-name='Color'] ul a,[data-name='Color'] label.accordion a"
        var FourteenKGoldColorLabels = {
          "gold": "14k yellow gold",
          "silver": "14k White gold",
          "rose gold": "14k Rose Gold",
        };

        // 14K Gold Exception - Init
        // TODO: Break down into 2 separate functions. One to combine stuff for Base Metals and one for the 14k Exception
        function init() {
          // We handle the changing of the labels when user interacts with the UI
          $(document).on("BaseMetalChanged", function (e, data) {
            handleColorLabelsByBaseMetal(data.activeBaseMetal);
          });

          // We handle the changing of labels for colors when the page loads for 14k GOLD...
          if ($(".opt---14k-gold").is(".active")) {
            changeColorLabelsFor14kGold();
          }
        }

        // 14K Gold Exception - BaseMetalChanged CallBack (handleColorLabelsByBaseMetal_Init)
        function handleColorLabelsByBaseMetal(selectedMetal) {

          if (selectedMetal == "14K GOLD") {
            changeColorLabelsFor14kGold();
          } else {
            revertColorLabels();
          }

        }

        // 14K Gold Exception - Change Color Labels when it is "active"
        function changeColorLabelsFor14kGold() {

          var $colorOptions = getColorOptions ()

          $colorOptions.each(function () {
            var link = $(this),
            label = $(this).text().trim().toLowerCase();

            link.text(FourteenKGoldColorLabels[label]);
          });
        }

        // 14K Gold Exception - Change Color Labels when it is "not active"
        function revertColorLabels() {
        
          var $colorOptions = getColorOptions ()

          $colorOptions.each(function () {
            console.log($(this));
            $(this).text($(this).data("value"));
          })

        }

        function getColorOptions () {
          return $(colorsSelector)
        }

        registerEvent("DOMContentLoaded", document, init)

      }

    },

    init: function () {

      this.metals.init()
      this.colors.init()

    }

  }
  
}

// Registers a single handler for a single event
function registerEvent( event, context, func, _this, capture ) {
  
  if ( "addEventListener" in context ) {
    if ( _this ) {
      context.addEventListener( event, func.bind( _this ), capture )
    }
    else {
      context.addEventListener( event, func, capture )
    } 
  }
  else {
    console.error(`registerEvent error for ${event}. 'context' is not a DOM element`)
  }

}

var isEventSupported = (function(){
  var TAGNAMES = {
    'select':'input',
    'change':'input',
    'submit':'form',
    'reset':'form',
    'error':'img',
    'load':'img',
    'abort':'img'
  }

  // https://stackoverflow.com/questions/2877393/detecting-support-for-a-given-javascript-event#answer-2877424
  function isEventSupported(eventName) {
    var el = document.createElement(TAGNAMES[eventName] || 'div');
    eventName = 'on' + eventName;
    var isSupported = (eventName in el);
    if (!isSupported) {
      el.setAttribute(eventName, 'return;');
      isSupported = typeof el[eventName] == 'function';
    }
    el = null;
    return isSupported;
  }
  return isEventSupported;
})();

function loadJs(url, cb, data) {
    var script = document.createElement('script');
    script.setAttribute('src', url);
    script.setAttribute('type', 'text/javascript');

    var loaded = false;
    var loadFunction = function () {
        if (loaded) return;
        loaded = true;
        cb && cb( data );
    };
    script.onload = loadFunction;
    script.onreadystatechange = loadFunction;
    document.getElementsByTagName("head")[0].appendChild(script);
};

function formatMoney ( price ) {
  return theme.Shopify.formatMoney( price, theme.money_format )
}

function getUpliftFieldById( fieldId ) {

  return window.Cloudlift.upload.App.fields.find(function ( field ){
      return fieldId == field.element.id
  })

}

// Init the Accordions and Options
anthology.accordion.init()
anthology.options.init()